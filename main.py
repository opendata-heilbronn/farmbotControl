import serial
from time import sleep
import signal
import sys

Xpos = 1140

asc = [[0x00, 0x00, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0xfa, 0x00, 0x00], 
            [0x00, 0xe0, 0x00, 0xe0, 0x00],
            [0x28, 0xfe, 0x28, 0xfe, 0x28],
            [0x24, 0x54, 0xfe, 0x54, 0x48],
            [0xc4, 0xc8, 0x10, 0x26, 0x46],
            [0x6c, 0x92, 0xaa, 0x44, 0x0a],
            [0x00, 0xa0, 0xc0, 0x00, 0x00],
            [0x00, 0x38, 0x44, 0x82, 0x00],
            [0x00, 0x82, 0x44, 0x38, 0x00],
            [0x10, 0x54, 0x38, 0x54, 0x10], 
            [0x10, 0x10, 0x7c, 0x10, 0x10], 
            [0x00, 0x0a, 0x0c, 0x00, 0x00],
            [0x10, 0x10, 0x10, 0x10, 0x10],
            [0x00, 0x06, 0x06, 0x00, 0x00],
            [0x04, 0x08, 0x10, 0x20, 0x40], 
            [0x7c, 0x8a, 0x92, 0xa2, 0x7c], 
            [0x00, 0x42, 0xfe, 0x02, 0x00], 
            [0x42, 0x86, 0x8a, 0x92, 0x62], 
            [0x84, 0x82, 0xa2, 0xd2, 0x8c], 
            [0x18, 0x28, 0x48, 0xfe, 0x08], 
            [0xe4, 0xa2, 0xa2, 0xa2, 0x9c], 
            [0x3c, 0x52, 0x92, 0x92, 0x0c], 
            [0x80, 0x8e, 0x90, 0xa0, 0xc0], 
            [0x6c, 0x92, 0x92, 0x92, 0x6c], 
            [0x60, 0x92, 0x92, 0x94, 0x78], 
            [0x00, 0x6c, 0x6c, 0x00, 0x00], 
            [0x00, 0x6a, 0x6c, 0x00, 0x00], 
            [0x00, 0x10, 0x28, 0x44, 0x82], 
            [0x28, 0x28, 0x28, 0x28, 0x28], 
            [0x82, 0x44, 0x28, 0x10, 0x00], 
            [0x40, 0x80, 0x8a, 0x90, 0x60], 
            [0x4c, 0x92, 0x9e, 0x82, 0x7c], 
            [0x7e, 0x88, 0x88, 0x88, 0x7e], 
            [0xfe, 0x92, 0x92, 0x92, 0x6c], 
            [0x7c, 0x82, 0x82, 0x82, 0x44], 
            [0xfe, 0x82, 0x82, 0x44, 0x38], 
            [0xfe, 0x92, 0x92, 0x92, 0x82], 
            [0xfe, 0x90, 0x90, 0x80, 0x80], 
            [0x7c, 0x82, 0x82, 0x8a, 0x4c], 
            [0xfe, 0x10, 0x10, 0x10, 0xfe], 
            [0x00, 0x82, 0xfe, 0x82, 0x00], 
            [0x04, 0x02, 0x82, 0xfc, 0x80], 
            [0xfe, 0x10, 0x28, 0x44, 0x82], 
            [0xfe, 0x02, 0x02, 0x02, 0x02], 
            [0xfe, 0x40, 0x20, 0x40, 0xfe], 
            [0xfe, 0x20, 0x10, 0x08, 0xfe], 
            [0x7c, 0x82, 0x82, 0x82, 0x7c], 
            [0xfe, 0x90, 0x90, 0x90, 0x60], 
            [0x7c, 0x82, 0x8a, 0x84, 0x7a], 
            [0xfe, 0x90, 0x98, 0x94, 0x62], 
            [0x62, 0x92, 0x92, 0x92, 0x8c], 
            [0x80, 0x80, 0xfe, 0x80, 0x80], 
            [0xfc, 0x02, 0x02, 0x02, 0xfc], 
            [0xf8, 0x04, 0x02, 0x04, 0xf8], 
            [0xfe, 0x04, 0x18, 0x04, 0xfe], 
            [0xc6, 0x28, 0x10, 0x28, 0xc6], 
            [0xc0, 0x20, 0x1e, 0x20, 0xc0], 
            [0x86, 0x8a, 0x92, 0xa2, 0xc2], 
            [0x00, 0x00, 0xfe, 0x82, 0x82], 
            [0x40, 0x20, 0x10, 0x08, 0x04], 
            [0x82, 0x82, 0xfe, 0x00, 0x00], 
            [0x20, 0x40, 0x80, 0x40, 0x20], 
            [0x02, 0x02, 0x02, 0x02, 0x02], 
            [0x00, 0x80, 0x40, 0x20, 0x00], 
            [0x04, 0x2a, 0x2a, 0x2a, 0x1e], 
            [0xfe, 0x12, 0x22, 0x22, 0x1c], 
            [0x1c, 0x22, 0x22, 0x22, 0x04], 
            [0x1c, 0x22, 0x22, 0x12, 0xfe], 
            [0x1c, 0x2a, 0x2a, 0x2a, 0x18], 
            [0x10, 0x7e, 0x90, 0x80, 0x40], 
            [0x10, 0x28, 0x2a, 0x2a, 0x3c], 
            [0xfe, 0x10, 0x20, 0x20, 0x1e], 
            [0x00, 0x22, 0xbe, 0x02, 0x00], 
            [0x04, 0x02, 0x22, 0xbc, 0x00], 
            [0x00, 0xfe, 0x08, 0x14, 0x22], 
            [0x00, 0x82, 0xfe, 0x02, 0x00], 
            [0x3e, 0x20, 0x18, 0x20, 0x1e], 
            [0x3e, 0x10, 0x20, 0x20, 0x1e], 
            [0x1c, 0x22, 0x22, 0x22, 0x1c], 
            [0x3e, 0x28, 0x28, 0x28, 0x10], 
            [0x10, 0x28, 0x28, 0x18, 0x3e], 
            [0x3e, 0x10, 0x20, 0x20, 0x10], 
            [0x12, 0x2a, 0x2a, 0x2a, 0x04], 
            [0x20, 0xfc, 0x22, 0x02, 0x04], 
            [0x3c, 0x02, 0x02, 0x04, 0x3e], 
            [0x38, 0x04, 0x02, 0x04, 0x38], 
            [0x3c, 0x02, 0x0c, 0x02, 0x3c], 
            [0x22, 0x14, 0x08, 0x14, 0x22], 
            [0x30, 0x0a, 0x0a, 0x0a, 0x3c], 
            [0x22, 0x26, 0x2a, 0x32, 0x22], 
            [0x00, 0x10, 0x6c, 0x82, 0x00], 
            [0x00, 0x00, 0xfe, 0x00, 0x00], 
            [0x00, 0x82, 0x6c, 0x10, 0x00], 
            [0x40, 0x80, 0xc0, 0x40, 0x80], 
            [0x00, 0x00, 0x00, 0x00, 0x00]]

def wait():
    while True:
        
        if ser.in_waiting >= 3:
            buf = ser.read(3)
            if buf.find("ok\n"):
                    print(buf)
                    ser.reset_input_buffer()
                    break
        sleep(0.05)


def getArr(char):
    num = ord(char)-32
    
    a = []
    
    for i in range(0,5):
        b = []
        for j in range(0,7):
            b.append((asc[num][i] & (2 << j)) >> j+1)
        a.append(b)   
        
    return a    
        
def printString(string):
    x = 400/14
    y = 400/14
    
    for i in range(0, len(string)):
        a = getArr(string[i])
        
        if i != 0:
            ser.write("G0 X-100 Y-100 Z-100\n")
            wait()
        
        for j in range(0, 5):
            for k in range(0,7):
                if a[j][k] == 1:
                    ser.write("G0 X" + str(Xpos) + " Y400 Z100\n")
                    wait()
                    print("done")
                    ser.write("G0 X" + str(Xpos) + " Y400 Z175\n")
                    wait()
                    ser.write("G92\n")
                    sleep(1)
                    ser.write("G0 X" + str(Xpos) + " Y400 Z100\n")
                    print("G0 X" + str(int(round(j * x + 5 * i * x + 400 + i * 25))) + " Y" + str(int(round(k* y))) + " Z100\n")
                    wait()
                    ser.write("G0 X" + str(int(round(j * x + 5 * i * x + 400 + i * 25))) + " Y" + str(int(round(k* y))) + " Z100\n")  
                    wait()
                    ser.write("G0 X" + str(int(round(j * x + 5 * i * x + 400 + i * 25))) + " Y" + str(int(round(k* y))) + " Z283\n")
                    wait()
                    ser.write("G93\n")
                    sleep(0.5)

def exit(signal, frame):
        print('You pressed Ctrl+C!')
        ser.close()
        sys.exit(1)

signal.signal(signal.SIGINT, exit)

ser = serial.Serial('/dev/ttyACM0', 115200, dsrdtr=True)

sleep(0)
wait()
#wait()

printString("Cowo")

ser.close()
